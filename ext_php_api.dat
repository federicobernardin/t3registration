a:2:{s:4:"meta";a:3:{s:5:"title";s:14:"T3Registration";s:5:"descr";s:21:"T3Registration plugin";s:7:"options";a:2:{s:10:"usageCount";N;s:19:"includeCodeAbstract";N;}}s:5:"files";a:1:{s:14:"MD5_05aaa8f77a";a:4:{s:8:"filename";s:35:"pi1/class.tx_t3registration_pi1.php";s:8:"filesize";i:141653;s:6:"header";a:5:{s:4:"text";s:60:"

Plugin 'Registration' for the 't3registration' extension.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:53:"@author    Federico Bernardin <federico@bernardin.it>";i:1;s:17:"@package    TYPO3";i:2;s:32:"@subpackage    tx_t3registration";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:42:"Federico Bernardin <federico@bernardin.it>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:18:"tx_t3registration ";}}}s:3:"DAT";a:65:{i:1;a:8:{s:6:"header";s:50:"class tx_t3registration_pi1 extends tslib_pibase {";s:5:"class";i:1;s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:5:{s:4:"text";s:60:"

Plugin 'Registration' for the 't3registration' extension.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:53:"@author    Federico Bernardin <federico@bernardin.it>";i:1;s:17:"@package    TYPO3";i:2;s:32:"@subpackage    tx_t3registration";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:42:"Federico Bernardin <federico@bernardin.it>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:18:"tx_t3registration ";}}}s:7:"content";s:0:"";s:12:"content_size";i:2496;s:13:"content_lines";i:93;s:6:"atLine";i:125;}i:3;a:8:{s:6:"header";s:39:"public function main($content, $conf) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:11:"sectionText";a:0:{}s:4:"cDat";a:3:{s:4:"text";s:32:"

The main method of the PlugIn
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:28:"$content: The PlugIn content";}i:1;a:2:{i:0;s:5:"array";i:1;s:31:"$conf: The PlugIn configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:32:"that is displayed on the website";}}s:7:"content";s:0:"";s:12:"content_size";i:7546;s:13:"content_lines";i:134;s:6:"atLine";i:226;}i:5;a:7:{s:6:"header";s:27:"protected function init() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:39:"

This function initializes the system
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:295;s:13:"content_lines";i:6;s:6:"atLine";i:366;}i:7;a:7:{s:6:"header";s:35:"protected function initFlexform() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:94:"

This function fetches flex data from flex form plugin and merge data into $this conf array.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:2955;s:13:"content_lines";i:47;s:6:"atLine";i:378;}i:9;a:8:{s:6:"header";s:30:"protected function getForm() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:11:"sectionText";a:0:{}s:4:"cDat";a:3:{s:4:"text";s:60:"

This function manages the render of form or preview infos
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:13:"the form HTML";}}s:7:"content";s:0:"";s:12:"content_size";i:10810;s:13:"content_lines";i:149;s:6:"atLine";i:431;}i:11;a:7:{s:6:"header";s:56:"public function getAndReplaceSubpart($field, $content) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:76:"

This function get and replace the subparts with the corresponding fields.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:37:"$field        the field configuration";}i:1;a:2:{i:0;s:6:"string";i:1;s:57:"$content        the html string that contains the markers";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:13:"the html code";}}s:7:"content";s:0:"";s:12:"content_size";i:2052;s:13:"content_lines";i:21;s:6:"atLine";i:588;}i:13;a:7:{s:6:"header";s:78:"public function getAndReplaceSubpartPreview($field, $content, $contentArray) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:55:"

This function replaces the subparts in preview mode.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"$field the field configuration";}i:1;a:2:{i:0;s:6:"string";i:1;s:50:"$content the html string that contains the markers";}i:2;a:2:{i:0;s:6:"string";i:1;s:13:"$contentArray";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:27:"the field preview HTML code";}}s:7:"content";s:0:"";s:12:"content_size";i:5945;s:13:"content_lines";i:65;s:6:"atLine";i:618;}i:15;a:7:{s:6:"header";s:41:"protected function getAutoField($field) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:102:"

This function return the html code for every field passed according to the specified configuration.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:37:"$field        the field configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:19:"the html field code";}}s:7:"content";s:0:"";s:12:"content_size";i:9787;s:13:"content_lines";i:111;s:6:"atLine";i:690;}i:17;a:7:{s:6:"header";s:64:"protected function getIdForField($field, $onlyIdValue = false) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:66:"

This function elaborates configuration to create an Id for Field";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:26:"$field field configuration";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:12:"$onlyIdValue";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:2:"id";}}s:7:"content";s:0:"";s:12:"content_size";i:881;s:13:"content_lines";i:10;s:6:"atLine";i:809;}i:19;a:7:{s:6:"header";s:71:"protected function getUploadField($field, $value = '', $counter = '') {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:59:"

This function manages the render process of single field
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:23:"$field array field data";}i:1;a:2:{i:0;s:6:"string";i:1;s:40:"$value value to insert into hidden field";}i:2;a:2:{i:0;s:6:"string";i:1;s:27:"$counter counter for images";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:19:"the field HTML code";}}s:7:"content";s:0:"";s:12:"content_size";i:1859;s:13:"content_lines";i:31;s:6:"atLine";i:828;}i:21;a:7:{s:6:"header";s:38:"protected function endRegistration() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:44:"

This function call the insertUser method.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:36:"the registration final HTML template";}}s:7:"content";s:0:"";s:12:"content_size";i:1684;s:13:"content_lines";i:28;s:6:"atLine";i:865;}i:23;a:7:{s:6:"header";s:49:"protected function showProfile($user = array()) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:134:"

This function is called before getForm if user is logged, so it merge data from database into piVars, only if form is not submitted
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:56:"value to overwrite standard data (used in template test)";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:18:"the form HTML code";}}s:7:"content";s:0:"";s:12:"content_size";i:1290;s:13:"content_lines";i:24;s:6:"atLine";i:900;}i:25;a:7:{s:6:"header";s:54:"protected function getErrorSubpart($field, $content) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:5:{s:4:"text";s:126:"

This function gets the error subpart for the passed field and then it replaces the error marker with the error description.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:37:"$field        the field configuration";}i:1;a:2:{i:0;s:6:"string";i:1;s:57:"$content        the html string that contains the markers";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:40:"the HTML code with the error description";}s:5:"other";a:1:{i:0;s:16:"@tested 20111017";}s:11:"other_index";a:1:{s:7:"@tested";a:1:{i:0;s:9:"20111017 ";}}}s:7:"content";s:0:"";s:12:"content_size";i:1921;s:13:"content_lines";i:23;s:6:"atLine";i:933;}i:27;a:8:{s:6:"header";s:34:"protected function checkErrors() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:11:"sectionText";a:0:{}s:4:"cDat";a:3:{s:4:"text";s:157:"

This function checks every fields errors. Descriptions of found errors are put into $this->errorArray.
return boolean true if one or more errors are found
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:23:"true if error was found";}}s:7:"content";s:0:"";s:12:"content_size";i:453;s:13:"content_lines";i:9;s:6:"atLine";i:963;}i:29;a:7:{s:6:"header";s:47:"public function getEvaluationRulesList($name) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:50:"

This function fetches all evaluation from field
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:31:"$name name of field to evaluate";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:21:"evaluation array list";}}s:7:"content";s:0:"";s:12:"content_size";i:1743;s:13:"content_lines";i:37;s:6:"atLine";i:979;}i:31;a:7:{s:6:"header";s:39:"protected function checkField($field) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:87:"

This function checks evaluation field types. Then it calls a method (evaluateField).
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:32:"$field        the field to check";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:34:"false if the field contains errors";}}s:7:"content";s:0:"";s:12:"content_size";i:679;s:13:"content_lines";i:16;s:6:"atLine";i:1023;}i:33;a:7:{s:6:"header";s:77:"protected function evaluateField($value, $evaluationRule, $field = array()) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:73:"

This function checks if the field respects the evaluation rule passed.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:32:"$value        the value to check";}i:1;a:2:{i:0;s:6:"string";i:1;s:66:"$evaluationRule        the evaluation rule used to check the value";}i:2;a:2:{i:0;s:5:"array";i:1;s:39:"$field        array field configuration";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:47:"true if the field respects the evaluation rule.";}}s:7:"content";s:0:"";s:12:"content_size";i:3501;s:13:"content_lines";i:78;s:6:"atLine";i:1048;}i:35;a:7:{s:6:"header";s:66:"protected function checkUniqueField($value, $field, $folder = 0) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:81:"

This function checks if the value inserted in the field by the user is unique.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:32:"$value        the value to check";}i:1;a:2:{i:0;s:5:"array";i:1;s:37:"$field        the field configuration";}i:2;a:2:{i:0;s:7:"integer";i:1;s:52:"$folder    if set user is found inside the folder id";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:27:"true if the value is unique";}}s:7:"content";s:0:"";s:12:"content_size";i:891;s:13:"content_lines";i:23;s:6:"atLine";i:1135;}i:37;a:7:{s:6:"header";s:48:"protected function checkLength($value, $field) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:96:"

This function control if string is greater than config.maxchars and less than config.minchars
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:28:"$value        value to check";}i:1;a:2:{i:0;s:5:"array";i:1;s:39:"$field        field configuration array";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:41:"true if rule is satisfied otherwise false";}}s:7:"content";s:0:"";s:12:"content_size";i:467;s:13:"content_lines";i:12;s:6:"atLine";i:1166;}i:39;a:7:{s:6:"header";s:70:"protected function checkFileUploaded($name, $size, $tmpFile, $field) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:64:"

This function checks if the uploaded file is an allowed file.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"string";i:1;s:38:"$name        complete name of the file";}i:1;a:2:{i:0;s:7:"integer";i:1;s:29:"$size        size of the file";}i:2;a:2:{i:0;s:6:"string";i:1;s:8:"$tmpFile";}i:3;a:2:{i:0;s:5:"array";i:1;s:37:"$field        the field configuration";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:26:"the uploaded file features";}}s:7:"content";s:0:"";s:12:"content_size";i:785;s:13:"content_lines";i:17;s:6:"atLine";i:1188;}i:41;a:8:{s:6:"header";s:55:"protected function emailDeletionSent($user = array()) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:11:"sectionText";a:0:{}s:4:"cDat";a:3:{s:4:"text";s:207:"

This function prepares the email to send user for deleting and create the auth code for authenticate the confirmation
Extract the "T3REGISTRATION_DELETE_SENTEMAIL" marker subpart and create the email body
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:22:"user to overwrite data";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:36:"the registration final HTML template";}}s:7:"content";s:0:"";s:12:"content_size";i:1875;s:13:"content_lines";i:31;s:6:"atLine";i:1213;}i:43;a:7:{s:6:"header";s:39:"protected function deleteEmail($user) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:58:"

This function prepares the user deletion email message.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:41:"$user        the target user of the email";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:45:"the type and the HTML content of the message.";}}s:7:"content";s:0:"";s:12:"content_size";i:1685;s:13:"content_lines";i:24;s:6:"atLine";i:1251;}i:45;a:7:{s:6:"header";s:56:"protected function sendAdviceAfterAuthorization($user) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:85:"

This function prepares email message to advice the user about admin authorization.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:41:"$user        the target user of the email";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:45:"the type and the HTML content of the message.";}}s:7:"content";s:0:"";s:12:"content_size";i:1295;s:13:"content_lines";i:19;s:6:"atLine";i:1282;}i:47;a:7:{s:6:"header";s:45:"protected function confirmationEmail($user) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:62:"

This function prepares the user confirmation email message.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:41:"$user        the target user of the email";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:45:"the type and the HTML content of the message.";}}s:7:"content";s:0:"";s:12:"content_size";i:3154;s:13:"content_lines";i:45;s:6:"atLine";i:1308;}i:49;a:7:{s:6:"header";s:46:"protected function authorizationEmail($user) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:71:"

This function prepares the administrator confirmation email message.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:41:"$user        the target user of the email";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:45:"the type and the HTML content of the message.";}}s:7:"content";s:0:"";s:12:"content_size";i:2233;s:13:"content_lines";i:30;s:6:"atLine";i:1360;}i:51;a:7:{s:6:"header";s:90:"protected function prepareEmailContent($subpartHTMLMarker, $subpartTextMarker, $markers) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:71:"

This function prepare the email content based on value from flexform
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:48:"$subpartHTMLMarker        string for HTML marker";}i:1;a:2:{i:0;s:6:"string";i:1;s:48:"$subpartTextMarker        string for Text marker";}i:2;a:2:{i:0;s:5:"array";i:1;s:45:"$markers        array of marker to substitute";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:32:"with content HTML and text parts";}}s:7:"content";s:0:"";s:12:"content_size";i:619;s:13:"content_lines";i:13;s:6:"atLine";i:1399;}i:53;a:7:{s:6:"header";s:57:"protected function sendEmail($message, $user, $subject) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:98:"

This function prepares and sends the email. It can be sent to the user or to the administrator.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:48:"$message        the message content of the email";}i:1;a:2:{i:0;s:5:"array";i:1;s:41:"$user        the target user of the email";}i:2;a:2:{i:0;s:6:"string";i:1;s:28:"$subject   subject for email";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:5248;s:13:"content_lines";i:103;s:6:"atLine";i:1421;}i:55;a:7:{s:6:"header";s:33:"public function getMailFormat() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:86:"

This function is used by external hook or library to obtain the email format choise
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:12:"email format";}}s:7:"content";s:0:"";s:12:"content_size";i:47;s:13:"content_lines";i:4;s:6:"atLine";i:1530;}i:57;a:7:{s:6:"header";s:37:"protected function setEmailFormat() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:124:"

This function defines the emailFormat class variable and set it to 1,2 or 3 depends on the type of mail format user chose
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:560;s:13:"content_lines";i:15;s:6:"atLine";i:1540;}i:59;a:8:{s:6:"header";s:44:"protected function argumentsFromUrlCheck() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:11:"sectionText";a:0:{}s:4:"cDat";a:3:{s:4:"text";s:349:"

This function defines the action to do when the page is load. If the user loads the page, the user-confiramtion is done. If the administrator
loads the page, the admin-confirmation is done (it happens in double-optin confirmation mode). If the "action" parameter value in piVars array is
"delete", when the page is load the deletion is confirmed.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:2133;s:13:"content_lines";i:42;s:6:"atLine";i:1563;}i:61;a:7:{s:6:"header";s:63:"protected function prepareAndSendEmailSubpart($action, $user) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:75:"

This function calls the methods for preparing and for sending the email.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:131:"$action        the action to be performed. Possible values can be "deleteRequest", "confirmationRequest" or "authorizationRequest".";}i:1;a:2:{i:0;s:5:"array";i:1;s:41:"$user        the target user of the email";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:563;s:13:"content_lines";i:14;s:6:"atLine";i:1613;}i:63;a:7:{s:6:"header";s:42:"protected function confirmUserDeletion() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:133:"

This function checks if the user can be confirmed and it calls the method updateConfirmedUser for updating the user into database.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:62:"true if the user was been correctly confirmed, false otherwise";}}s:7:"content";s:0:"";s:12:"content_size";i:641;s:13:"content_lines";i:12;s:6:"atLine";i:1633;}i:65;a:7:{s:6:"header";s:55:"protected function confirmUserDeletionTemplate($user) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:46:"

This function creates the HTML code to show
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:33:"$user        array user to delete";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:20:"HTML content to show";}}s:7:"content";s:0:"";s:12:"content_size";i:571;s:13:"content_lines";i:10;s:6:"atLine";i:1652;}i:67;a:7:{s:6:"header";s:38:"protected function deleteUser($user) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:42:"

This function delete user from database
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:22:"user data to overwrite";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:62:"true if the user was been correctly confirmed, false otherwise";}}s:7:"content";s:0:"";s:12:"content_size";i:2213;s:13:"content_lines";i:40;s:6:"atLine";i:1669;}i:69;a:7:{s:6:"header";s:49:"protected function confirmationProcessControl() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:89:"

This function manages the confirmation process with double optin or moderation control
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:16:"HTML        code";}}s:7:"content";s:0:"";s:12:"content_size";i:2588;s:13:"content_lines";i:46;s:6:"atLine";i:1715;}i:71;a:7:{s:6:"header";s:39:"protected function confirmUser($user) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:133:"

This function checks if the user can be confirmed and it calls the method updateConfirmedUser for updating the user into database.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:9:"user data";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:62:"true if the user was been correctly confirmed, false otherwise";}}s:7:"content";s:0:"";s:12:"content_size";i:757;s:13:"content_lines";i:13;s:6:"atLine";i:1768;}i:73;a:7:{s:6:"header";s:47:"protected function updateConfirmedUser($user) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:92:"

This function confirms the user by updating the user record into fe_users database table.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:15:"$user user data";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:2757;s:13:"content_lines";i:57;s:6:"atLine";i:1788;}i:75;a:7:{s:6:"header";s:42:"protected function authorizedUser($user) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:140:"

This function checks if the user can be authorized and it calls the method updateAdminAuthorizedUser for updating the user into database.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:15:"$user user data";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:62:"true if the user was been correctly confirmed, false otherwise";}}s:7:"content";s:0:"";s:12:"content_size";i:634;s:13:"content_lines";i:11;s:6:"atLine";i:1852;}i:77;a:7:{s:6:"header";s:53:"protected function updateAdminAuthorizedUser($user) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:91:"

This function authorizes user by upadating the user record into fe_users database table.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:38:"$user        the user to be authorized";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:2129;s:13:"content_lines";i:38;s:6:"atLine";i:1870;}i:79;a:7:{s:6:"header";s:56:"protected function userIsRegistered($lastEvent, $user) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:62:"

This method is used to trigger hook after user registration
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:87:"specify the name of the event (it could be authorization by admin or user registration)";}i:1;a:2:{i:0;s:6:"string";i:1;s:9:"user data";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:425;s:13:"content_lines";i:9;s:6:"atLine";i:1916;}i:81;a:7:{s:6:"header";s:36:"protected function autoLogin($uid) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:53:"

This function makes auto login form confirmed user
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:40:"$uid        integer id of confirmed user";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:1204;s:13:"content_lines";i:22;s:6:"atLine";i:1932;}i:83;a:7:{s:6:"header";s:37:"protected function showDeleteLink() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:39:"

This function shows the delete link.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:18:"the link HTML code";}}s:7:"content";s:0:"";s:12:"content_size";i:960;s:13:"content_lines";i:20;s:6:"atLine";i:1960;}i:85;a:8:{s:6:"header";s:89:"protected function addFunctionReplace($arrayToTraverse, &$parentArray, $parentKey = '') {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:11:"sectionText";a:0:{}s:4:"cDat";a:3:{s:4:"text";s:95:"

This function transforms recursively the .add property of javascript into key additionalEval
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:41:"$arrayToTraverse        array child array";}i:1;a:2:{i:0;s:5:"array";i:1;s:36:"$parentArray        array root array";}i:2;a:2:{i:0;s:6:"string";i:1;s:47:"$parentKey        string name of the parent key";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:657;s:13:"content_lines";i:17;s:6:"atLine";i:1989;}i:87;a:7:{s:6:"header";s:33:"public function getField($name) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:82:"

This function allow to extract a specific key from private variable $fieldsData
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:44:"$name        string key of array $fieldsData";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:33:"value of $this->fieldsData[$name]";}}s:7:"content";s:0:"";s:12:"content_size";i:110;s:13:"content_lines";i:4;s:6:"atLine";i:2013;}i:89;a:7:{s:6:"header";s:49:"protected function controlIfUsernameIsCorrect() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:113:"

This function checks if username contains required and unique, looking for it into alternative username fields
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:50:"if true all ok, otherwise return error description";}}s:7:"content";s:0:"";s:12:"content_size";i:792;s:13:"content_lines";i:16;s:6:"atLine";i:2023;}i:91;a:7:{s:6:"header";s:44:"protected function controlEmailAndMethod() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:62:"

Method to test the email data before show registration form
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:22:"true if test is passed";}}s:7:"content";s:0:"";s:12:"content_size";i:298;s:13:"content_lines";i:11;s:6:"atLine";i:2045;}i:93;a:7:{s:6:"header";s:35:"protected function loadTCAField() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:66:"

This function loads TCA fields array into $this->TCAField array
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:118;s:13:"content_lines";i:5;s:6:"atLine";i:2062;}i:95;a:7:{s:6:"header";s:53:"protected function mergeTCAFieldWithConfiguration() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:72:"

This function merges TCA fields with configuration fields
return void
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:619;s:13:"content_lines";i:10;s:6:"atLine";i:2074;}i:97;a:7:{s:6:"header";s:50:"protected function testUploadFolderField($field) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:90:"

This function checks if upload folder key of config array of specified field is defined
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:45:"$field        array field configuration array";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:32:"false if not set, otherwise true";}}s:7:"content";s:0:"";s:12:"content_size";i:233;s:13:"content_lines";i:7;s:6:"atLine";i:2091;}i:99;a:7:{s:6:"header";s:55:"protected function getTextToResendConfirmationEmail() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:55:"

Text to insert for resending email with confirmation
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:4:"text";}}s:7:"content";s:0:"";s:12:"content_size";i:318;s:13:"content_lines";i:5;s:6:"atLine";i:2104;}i:101;a:7:{s:6:"header";s:34:"protected function getTemplate() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:104:"

This function returns the wright template to use. If no content is found, the function returns false.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:23:"the whole HTML template";}}s:7:"content";s:0:"";s:12:"content_size";i:224;s:13:"content_lines";i:8;s:6:"atLine";i:2115;}i:103;a:7:{s:6:"header";s:57:"protected function fileFieldTransform2Array($fieldName) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:73:"

This function convert a piVars field comma separated values into array
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:43:"$fieldName        string field to transform";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:89;s:13:"content_lines";i:4;s:6:"atLine";i:2130;}i:105;a:7:{s:6:"header";s:33:"protected function insertUser() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:227:"

This method insert user in fe_users database table. If automatic password generation is set to true and no password is set by the user, a new
password is automatically generated. It also calls the methods for sending emails.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:4193;s:13:"content_lines";i:73;s:6:"atLine";i:2141;}i:107;a:7:{s:6:"header";s:49:"protected function sendAgainConfirmationEmail() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:77:"

This function resend the confirmation code and show the form to request it
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:20:"HTML code to display";}}s:7:"content";s:0:"";s:12:"content_size";i:4737;s:13:"content_lines";i:51;s:6:"atLine";i:2220;}i:109;a:7:{s:6:"header";s:40:"protected function updateUserProfile() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:227:"

This method insert user in fe_users database table. If automatic password generation is set to true and no password is set by the user, a new
password is automatically generated. It also calls the methods for sending emails.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:2166;s:13:"content_lines";i:35;s:6:"atLine";i:2278;}i:111;a:7:{s:6:"header";s:34:"protected function getUsername() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:113:"

This function returns the username. If no one is specified by the user, it automatically generates a username.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:8:"username";}}s:7:"content";s:0:"";s:12:"content_size";i:264;s:13:"content_lines";i:7;s:6:"atLine";i:2319;}i:113;a:7:{s:6:"header";s:34:"protected function setAuthCode() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:83:"

This function set the auth code for user confirmation or moderation confirmation
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:15:"$user user data";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:17:"user data updated";}}s:7:"content";s:0:"";s:12:"content_size";i:763;s:13:"content_lines";i:19;s:6:"atLine";i:2333;}i:115;a:7:{s:6:"header";s:41:"protected function changeProfileCheck() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:60:"

This function cheks if you're into change profile process
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:43:"true if user is in profile, false otherwise";}}s:7:"content";s:0:"";s:12:"content_size";i:216;s:13:"content_lines";i:8;s:6:"atLine";i:2358;}i:117;a:7:{s:6:"header";s:38:"protected function showOnAutoLogin() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:55:"

This function shows HTML after redirect for autologin";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:4:"HTML";}}s:7:"content";s:0:"";s:12:"content_size";i:882;s:13:"content_lines";i:17;s:6:"atLine";i:2372;}i:119;a:7:{s:6:"header";s:50:"public function removeDotFromArray($sourceArray) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:59:"

This function remove dots from keys of the passed array.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:44:"$sourceArray        the array to be modified";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:472;s:13:"content_lines";i:14;s:6:"atLine";i:2396;}i:121;a:7:{s:6:"header";s:58:"protected function removeUnusedFields($arrayToElaborate) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:70:"

This function remove all TS configuration for fields not in plugin.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:49:"$arrayToElaborate        the array to be modified";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:26:"array without unused field";}}s:7:"content";s:0:"";s:12:"content_size";i:225;s:13:"content_lines";i:9;s:6:"atLine";i:2417;}i:123;a:7:{s:6:"header";s:42:"protected function htmlentities($string) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:75:"

This function execute the replacing of html entities with UTF-8 encoding
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:28:"$string string to manipulate";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:21:"htmlentitiesed string";}}s:7:"content";s:0:"";s:12:"content_size";i:288;s:13:"content_lines";i:8;s:6:"atLine";i:2433;}i:125;a:7:{s:6:"header";s:47:"protected function removeAllMarkers($content) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:73:"

Function to removes all marker into the template after replace process
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:27:"$content content to replace";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:15:"content cleared";}}s:7:"content";s:0:"";s:12:"content_size";i:980;s:13:"content_lines";i:24;s:6:"atLine";i:2448;}i:127;a:5:{s:6:"header";s:42:"protected function testTemplateProcess() {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:11:"sectionText";a:0:{}s:4:"cDat";a:3:{s:4:"text";s:48:"

Function to show specific test of the template";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:16:"template to show";}}s:6:"atLine";i:2478;}i:129;a:7:{s:6:"header";s:49:"protected function testGetUser($correct = true) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:5:{s:4:"text";s:42:"

This function fetches user from xml data";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"boolean";i:1;s:59:"$correct if true fetches correct user, otherwise wrong user";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:4:"user";}s:5:"other";a:1:{i:0;s:23:"@throws t3lib_exception";}s:11:"other_index";a:1:{s:7:"@throws";a:1:{i:0;s:16:"t3lib_exception ";}}}s:7:"content";s:0:"";s:12:"content_size";i:872;s:13:"content_lines";i:19;s:6:"atLine";i:2600;}}}}}